#include "lab4.h"
#include <iostream>
#include <iomanip>
#include <limits>

// =============================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏
// =============================

// üîπ –í–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 4x4 –º–∞—Ç—Ä–∏—Ü—ã
void fillMatrix(double matrix[4][4], char name) {
    std::cout << "\n–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã " << name << " (4x4):\n";
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            std::cout << name << "[" << i + 1 << "][" << j + 1 << "]: ";
            while (!(std::cin >> matrix[i][j])) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ";
            }
        }
    }
}

// üîπ –í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ —ç–∫—Ä–∞–Ω
void printMatrix(double matrix[4][4], char name) {
    std::cout << "\n–ú–∞—Ç—Ä–∏—Ü–∞ " << name << ":\n";
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            std::cout << std::setw(8) << std::fixed << std::setprecision(2) << matrix[i][j];
        }
        std::cout << "\n";
    }
}

// üîπ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
void extractDiagonal(double matrix[4][4], double diag[4]) {
    for (int i = 0; i < 4; ++i)
        diag[i] = matrix[i][i];
}

// üîπ –í—ã–≤–æ–¥ –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
void printArray(double arr[4], const std::string& name) {
    std::cout << "\n–ú–∞—Å—Å–∏–≤ " << name << " (–≥–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å): ";
    for (int i = 0; i < 4; ++i)
        std::cout << std::setw(6) << std::fixed << std::setprecision(2) << arr[i];
    std::cout << "\n";
}

// =============================
// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
// =============================
void lab4_run() {
    std::cout << "\n=== –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ4 (C++) ===\n";
    std::cout << "–¢–µ–º–∞: –§—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –ú–∞—Ç—Ä–∏—Ü—ã –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏\n\n";

    double A[4][4];
    double B[4][4];
    double X[4];
    double Y[4];

    // –í–≤–æ–¥ –∏ –≤—ã–≤–æ–¥
    fillMatrix(A, 'A');
    fillMatrix(B, 'B');

    printMatrix(A, 'A');
    printMatrix(B, 'B');

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
    extractDiagonal(A, X);
    extractDiagonal(B, Y);

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    printArray(X, "X –∏–∑ A");
    printArray(Y, "Y –∏–∑ B");

    std::cout << "\n–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n";
}
